{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. mkdocs -dg - Help me help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. Py-ART Basics Overview Within this notebook, we will cover: General overview of Py-ART and its functionality Reading data using Py-ART An overview of the pyart.Radar object Create a Plot of our Radar Data Prerequisites Concepts Importance Notes Intro to Cartopy Helpful Basic features Matplotlib Basics Helpful Basic plotting NumPy Basics Helpful Basic arrays Imports # import os import warnings import cartopy.crs as ccrs import matplotlib.pyplot as plt import numpy as np import pyart warnings.filterwarnings('ignore') An Overview of Py-ART History of the Py-ART Development began to address the needs of ARM with the acquisition of a number of new scanning cloud and precipitation radar as part of the American Recovery Act. The project has since expanded to work with a variety of weather radars and a wider user base including radar researchers and climate modelers. The software has been released on GitHub as open source software under a BSD license. Runs on Linux, OS X. It also runs on Windows with more limited functionality. What can PyART Do? Py-ART can be used for a variety of tasks from basic plotting to more complex processing pipelines. Specific uses for Py-ART include: Reading radar data in a variety of file formats. Creating plots and visualization of radar data. Correcting radar moments while in antenna coordinates, such as: Doppler unfolding/de-aliasing. Attenuation correction. Phase processing using a Linear Programming method. Mapping data from one or multiple radars onto a Cartesian grid. Performing retrievals. Writing radial and Cartesian data to NetCDF files. Reading in Data Using Py-ART When reading in a radar file, we use the pyart.io.read module. pyart.io.read can read a variety of different radar formats, such as Cf/Radial, LASSEN, and more. The documentation on what formats can be read by Py-ART can be found here: Py-ART IO Documentation For most file formats listed on the page, using pyart.io.read should suffice since Py-ART has the ability to automatically detect the file format. Let's check out what arguments arguments pyart.io.read() takes in! pyart.io.read? Let's use a sample data file from `pyart` - which is [**cfradial** format](https://github.com/NCAR/CfRadial). When we read this in, we get a [`pyart.Radar` object](https://arm-doe.github.io/pyart/API/generated/pyart.core.Radar.html#pyart.core.Radar)! file = '../data/sample_sail_ppi.nc' radar = pyart.io.read(file) radar Investigate the pyart.Radar object","title":"Welcome to MkDocs"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. mkdocs -dg - Help me help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"#_1","text":"","title":""},{"location":"#py-art-basics","text":"","title":"Py-ART Basics"},{"location":"#overview","text":"Within this notebook, we will cover: General overview of Py-ART and its functionality Reading data using Py-ART An overview of the pyart.Radar object Create a Plot of our Radar Data","title":"Overview"},{"location":"#prerequisites","text":"Concepts Importance Notes Intro to Cartopy Helpful Basic features Matplotlib Basics Helpful Basic plotting NumPy Basics Helpful Basic arrays","title":"Prerequisites"},{"location":"#imports","text":"# import os import warnings import cartopy.crs as ccrs import matplotlib.pyplot as plt import numpy as np import pyart warnings.filterwarnings('ignore')","title":"Imports"},{"location":"#an-overview-of-py-art","text":"","title":"An Overview of Py-ART"},{"location":"#history-of-the-py-art","text":"Development began to address the needs of ARM with the acquisition of a number of new scanning cloud and precipitation radar as part of the American Recovery Act. The project has since expanded to work with a variety of weather radars and a wider user base including radar researchers and climate modelers. The software has been released on GitHub as open source software under a BSD license. Runs on Linux, OS X. It also runs on Windows with more limited functionality.","title":"History of the Py-ART"},{"location":"#what-can-pyart-do","text":"Py-ART can be used for a variety of tasks from basic plotting to more complex processing pipelines. Specific uses for Py-ART include: Reading radar data in a variety of file formats. Creating plots and visualization of radar data. Correcting radar moments while in antenna coordinates, such as: Doppler unfolding/de-aliasing. Attenuation correction. Phase processing using a Linear Programming method. Mapping data from one or multiple radars onto a Cartesian grid. Performing retrievals. Writing radial and Cartesian data to NetCDF files.","title":"What can PyART Do?"},{"location":"#reading-in-data-using-py-art","text":"When reading in a radar file, we use the pyart.io.read module. pyart.io.read can read a variety of different radar formats, such as Cf/Radial, LASSEN, and more. The documentation on what formats can be read by Py-ART can be found here: Py-ART IO Documentation For most file formats listed on the page, using pyart.io.read should suffice since Py-ART has the ability to automatically detect the file format. Let's check out what arguments arguments pyart.io.read() takes in! pyart.io.read? Let's use a sample data file from `pyart` - which is [**cfradial** format](https://github.com/NCAR/CfRadial). When we read this in, we get a [`pyart.Radar` object](https://arm-doe.github.io/pyart/API/generated/pyart.core.Radar.html#pyart.core.Radar)! file = '../data/sample_sail_ppi.nc' radar = pyart.io.read(file) radar","title":"Reading in Data Using Py-ART"},{"location":"#investigate-the-pyartradar-object","text":"","title":"Investigate the pyart.Radar object"}]}